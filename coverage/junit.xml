<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="C:\laragon\www\CarRentSystem\phpunit.xml" tests="144" assertions="392" errors="0" failures="0" skipped="8" time="46.272530">
    <testsuite name="Unit" tests="64" assertions="154" errors="0" failures="0" skipped="2" time="17.842404">
      <testsuite name="Tests\Unit\Models\VehicleTest" file="tests\Unit\Models\VehicleTest.php" tests="19" assertions="35" errors="0" failures="0" skipped="0" time="6.062326">
        <testcase name="`Vehicle Model` → `Query Scopes` → it excludes vehicles with conflicting bookings" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Query Scopes` → it excludes vehicles with conflicting bookings" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="1.478781"/>
        <testcase name="`Vehicle Model` → it has many vehicle images" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it has many vehicle images" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.263091"/>
        <testcase name="`Vehicle Model` → it has many bookings" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it has many bookings" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.216104"/>
        <testcase name="`Vehicle Model` → it has correct fillable attributes" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it has correct fillable attributes" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.247350"/>
        <testcase name="`Vehicle Model` → `Query Scopes` → it filters vehicles by owner" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Query Scopes` → it filters vehicles by owner" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.240817"/>
        <testcase name="`Vehicle Model` → it handles invalid daily rate gracefully" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it handles invalid daily rate gracefully" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.227486"/>
        <testcase name="`Vehicle Model` → it can create vehicle with required attributes" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it can create vehicle with required attributes" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="4" time="0.398750"/>
        <testcase name="`Vehicle Model` → `Query Scopes` → it filters available vehicles for rent" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Query Scopes` → it filters available vehicles for rent" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.273684"/>
        <testcase name="`Vehicle Model` → it can soft delete" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it can soft delete" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.201040"/>
        <testcase name="`Vehicle Model` → it casts attributes correctly" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it casts attributes correctly" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="5" time="0.258833"/>
        <testcase name="`Vehicle Model` → `Featured Image URL Generation` → it falls back to featured_image field" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Featured Image URL Generation` → it falls back to featured_image field" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.245637"/>
        <testcase name="`Vehicle Model` → `Featured Image URL Generation` → it returns first image when no primary image exists" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Featured Image URL Generation` → it returns first image when no primary image exists" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.204381"/>
        <testcase name="`Vehicle Model` → `Featured Image URL Generation` → it falls back to first gallery image" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Featured Image URL Generation` → it falls back to first gallery image" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.211723"/>
        <testcase name="`Vehicle Model` → it belongs to an owner" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it belongs to an owner" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.210282"/>
        <testcase name="`Vehicle Model` → `Featured Image URL Generation` → it returns primary image from images relationship when loaded" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Featured Image URL Generation` → it returns primary image from images relationship when loaded" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.265570"/>
        <testcase name="`Vehicle Model` → it uses correct table name" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it uses correct table name" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.200563"/>
        <testcase name="`Vehicle Model` → `Query Scopes` → it filters by price range" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Query Scopes` → it filters by price range" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.232053"/>
        <testcase name="`Vehicle Model` → `Featured Image URL Generation` → it returns null when no images available" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → `Featured Image URL Generation` → it returns null when no images available" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="1" time="0.367133"/>
        <testcase name="`Vehicle Model` → it has many reviews" file="tests\Unit\Models\VehicleTest.php::`Vehicle Model` → it has many reviews" class="Tests\Unit\Models\VehicleTest" classname="Tests.Unit.Models.VehicleTest" assertions="2" time="0.319048"/>
      </testsuite>
      <testsuite name="Tests\Unit\DTOs\BookingCalculationDTOTest" file="tests\Unit\DTOs\BookingCalculationDTOTest.php" tests="4" assertions="19" errors="0" failures="0" skipped="0" time="0.864862">
        <testcase name="`BookingCalculationDTO` → it formats total with currency" file="tests\Unit\DTOs\BookingCalculationDTOTest.php::`BookingCalculationDTO` → it formats total with currency" class="Tests\Unit\DTOs\BookingCalculationDTOTest" classname="Tests.Unit.DTOs.BookingCalculationDTOTest" assertions="1" time="0.232973"/>
        <testcase name="`BookingCalculationDTO` → it calculates booking totals correctly" file="tests\Unit\DTOs\BookingCalculationDTOTest.php::`BookingCalculationDTO` → it calculates booking totals correctly" class="Tests\Unit\DTOs\BookingCalculationDTOTest" classname="Tests.Unit.DTOs.BookingCalculationDTOTest" assertions="6" time="0.200889"/>
        <testcase name="`BookingCalculationDTO` → it handles zero days correctly" file="tests\Unit\DTOs\BookingCalculationDTOTest.php::`BookingCalculationDTO` → it handles zero days correctly" class="Tests\Unit\DTOs\BookingCalculationDTOTest" classname="Tests.Unit.DTOs.BookingCalculationDTOTest" assertions="2" time="0.200384"/>
        <testcase name="`BookingCalculationDTO` → it converts to array with formatted amounts" file="tests\Unit\DTOs\BookingCalculationDTOTest.php::`BookingCalculationDTO` → it converts to array with formatted amounts" class="Tests\Unit\DTOs\BookingCalculationDTOTest" classname="Tests.Unit.DTOs.BookingCalculationDTOTest" assertions="10" time="0.230615"/>
      </testsuite>
      <testsuite name="Tests\Unit\Models\BookingTest" file="tests\Unit\Models\BookingTest.php" tests="13" assertions="25" errors="0" failures="0" skipped="0" time="3.775979">
        <testcase name="`Booking Model` → it can calculate total with commission" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it can calculate total with commission" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="2" time="0.300316"/>
        <testcase name="`Booking Model` → it belongs to a vehicle" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it belongs to a vehicle" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="2" time="0.218781"/>
        <testcase name="`Booking Model` → it has many payments" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it has many payments" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="2" time="0.202307"/>
        <testcase name="`Booking Model` → it belongs to a renter" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it belongs to a renter" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="2" time="0.231037"/>
        <testcase name="`Booking Model` → it has correct fillable attributes" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it has correct fillable attributes" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="1" time="0.236869"/>
        <testcase name="`Booking Model` → it can have different statuses" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it can have different statuses" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="4" time="0.401578"/>
        <testcase name="`Booking Model` → it can soft delete" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it can soft delete" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="2" time="0.262849"/>
        <testcase name="`Booking Model` → it uses correct table name" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it uses correct table name" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="1" time="0.265015"/>
        <testcase name="`Booking Model` → it calculates booking duration correctly" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it calculates booking duration correctly" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="1" time="0.366144"/>
        <testcase name="`Booking Model` → it has one review" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it has one review" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="1" time="0.290114"/>
        <testcase name="`Booking Model` → it validates date logic" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it validates date logic" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="1" time="0.388323"/>
        <testcase name="`Booking Model` → it casts dates correctly" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it casts dates correctly" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="3" time="0.318651"/>
        <testcase name="`Booking Model` → it casts amounts to decimal" file="tests\Unit\Models\BookingTest.php::`Booking Model` → it casts amounts to decimal" class="Tests\Unit\Models\BookingTest" classname="Tests.Unit.Models.BookingTest" assertions="3" time="0.293994"/>
      </testsuite>
      <testsuite name="Tests\Unit\Models\UserTest" file="tests\Unit\Models\UserTest.php" tests="11" assertions="22" errors="0" failures="0" skipped="0" time="2.672450">
        <testcase name="`User Model` → it hashes password when set" file="tests\Unit\Models\UserTest.php::`User Model` → it hashes password when set" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="2" time="0.233403"/>
        <testcase name="`User Model` → it renter can have many reviews" file="tests\Unit\Models\UserTest.php::`User Model` → it renter can have many reviews" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="2" time="0.244376"/>
        <testcase name="`User Model` → it has unique email constraint" file="tests\Unit\Models\UserTest.php::`User Model` → it has unique email constraint" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="1" time="0.215856"/>
        <testcase name="`User Model` → it uses email verification" file="tests\Unit\Models\UserTest.php::`User Model` → it uses email verification" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="2" time="0.256758"/>
        <testcase name="`User Model` → it has correct hidden attributes" file="tests\Unit\Models\UserTest.php::`User Model` → it has correct hidden attributes" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="1" time="0.229184"/>
        <testcase name="`User Model` → it renter can have many bookings" file="tests\Unit\Models\UserTest.php::`User Model` → it renter can have many bookings" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="2" time="0.223212"/>
        <testcase name="`User Model` → it has correct fillable attributes" file="tests\Unit\Models\UserTest.php::`User Model` → it has correct fillable attributes" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="1" time="0.205576"/>
        <testcase name="`User Model` → it can update profile information" file="tests\Unit\Models\UserTest.php::`User Model` → it can update profile information" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="3" time="0.195639"/>
        <testcase name="`User Model` → it owner can have many vehicles" file="tests\Unit\Models\UserTest.php::`User Model` → it owner can have many vehicles" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="2" time="0.397533"/>
        <testcase name="`User Model` → it casts attributes correctly" file="tests\Unit\Models\UserTest.php::`User Model` → it casts attributes correctly" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="3" time="0.245722"/>
        <testcase name="`User Model` → it can be created with different roles" file="tests\Unit\Models\UserTest.php::`User Model` → it can be created with different roles" class="Tests\Unit\Models\UserTest" classname="Tests.Unit.Models.UserTest" assertions="3" time="0.225192"/>
      </testsuite>
      <testsuite name="Tests\Unit\Models\PaymentTest" file="tests\Unit\Models\PaymentTest.php" tests="12" assertions="26" errors="0" failures="0" skipped="2" time="3.296708">
        <testcase name="`Payment Model` → it belongs to a booking" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it belongs to a booking" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="2" time="0.250190"/>
        <testcase name="`Payment Model` → it can handle cash payments with gateway response data" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it can handle cash payments with gateway response data" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="5" time="0.307575"/>
        <testcase name="`Payment Model` → it can have different payment methods" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it can have different payment methods" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="3" time="0.236878"/>
        <testcase name="`Payment Model` → it can store gateway response data" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it can store gateway response data" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="0" time="0.242469">
          <skipped/>
        </testcase>
        <testcase name="`Payment Model` → it has correct fillable attributes" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it has correct fillable attributes" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="1" time="0.207933"/>
        <testcase name="`Payment Model` → it uses correct table name" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it uses correct table name" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="1" time="0.299925"/>
        <testcase name="`Payment Model` → it can handle refunds" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it can handle refunds" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="3" time="0.236151"/>
        <testcase name="`Payment Model` → it can have different payment statuses" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it can have different payment statuses" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="4" time="0.422512"/>
        <testcase name="`Payment Model` → it can store digital payment data in gateway response" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it can store digital payment data in gateway response" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="3" time="0.421000"/>
        <testcase name="`Payment Model` → it casts dates correctly" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it casts dates correctly" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="2" time="0.217558"/>
        <testcase name="`Payment Model` → it can handle payment failures" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it can handle payment failures" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="0" time="0.221972">
          <skipped/>
        </testcase>
        <testcase name="`Payment Model` → it casts attributes correctly" file="tests\Unit\Models\PaymentTest.php::`Payment Model` → it casts attributes correctly" class="Tests\Unit\Models\PaymentTest" classname="Tests.Unit.Models.PaymentTest" assertions="2" time="0.232545"/>
      </testsuite>
      <testsuite name="Tests\Unit\DTOs\CreateBookingDTOTest" file="tests\Unit\DTOs\CreateBookingDTOTest.php" tests="5" assertions="27" errors="0" failures="0" skipped="0" time="1.170080">
        <testcase name="`CreateBookingDTO` → it determines when payment method ID is required" file="tests\Unit\DTOs\CreateBookingDTOTest.php::`CreateBookingDTO` → it determines when payment method ID is required" class="Tests\Unit\DTOs\CreateBookingDTOTest" classname="Tests.Unit.DTOs.CreateBookingDTOTest" assertions="2" time="0.226327"/>
        <testcase name="`CreateBookingDTO` → it detects invalid date range" file="tests\Unit\DTOs\CreateBookingDTOTest.php::`CreateBookingDTO` → it detects invalid date range" class="Tests\Unit\DTOs\CreateBookingDTOTest" classname="Tests.Unit.DTOs.CreateBookingDTOTest" assertions="1" time="0.320769"/>
        <testcase name="`CreateBookingDTO` → it validates date range correctly" file="tests\Unit\DTOs\CreateBookingDTOTest.php::`CreateBookingDTO` → it validates date range correctly" class="Tests\Unit\DTOs\CreateBookingDTOTest" classname="Tests.Unit.DTOs.CreateBookingDTOTest" assertions="1" time="0.207213"/>
        <testcase name="`CreateBookingDTO` → it can convert back to array" file="tests\Unit\DTOs\CreateBookingDTOTest.php::`CreateBookingDTO` → it can convert back to array" class="Tests\Unit\DTOs\CreateBookingDTOTest" classname="Tests.Unit.DTOs.CreateBookingDTOTest" assertions="13" time="0.203449"/>
        <testcase name="`CreateBookingDTO` → it can be created from array" file="tests\Unit\DTOs\CreateBookingDTOTest.php::`CreateBookingDTO` → it can be created from array" class="Tests\Unit\DTOs\CreateBookingDTOTest" classname="Tests.Unit.DTOs.CreateBookingDTOTest" assertions="10" time="0.212322"/>
      </testsuite>
    </testsuite>
    <testsuite name="Feature" tests="80" assertions="238" errors="0" failures="0" skipped="6" time="28.430127">
      <testsuite name="Tests\Feature\CalendarWidgetTest" file="tests\Feature\CalendarWidgetTest.php" tests="3" assertions="6" errors="0" failures="0" skipped="0" time="0.877464">
        <testcase name="booking calendar displays events for date range" file="tests\Feature\CalendarWidgetTest.php::booking calendar displays events for date range" class="Tests\Feature\CalendarWidgetTest" classname="Tests.Feature.CalendarWidgetTest" assertions="2" time="0.383291"/>
        <testcase name="booking model can be converted to calendar event" file="tests\Feature\CalendarWidgetTest.php::booking model can be converted to calendar event" class="Tests\Feature\CalendarWidgetTest" classname="Tests.Feature.CalendarWidgetTest" assertions="3" time="0.269920"/>
        <testcase name="booking calendar widget can be rendered" file="tests\Feature\CalendarWidgetTest.php::booking calendar widget can be rendered" class="Tests\Feature\CalendarWidgetTest" classname="Tests.Feature.CalendarWidgetTest" assertions="1" time="0.224253"/>
      </testsuite>
      <testsuite name="Tests\Feature\BookingCreationTest" file="tests\Feature\BookingCreationTest.php" tests="3" assertions="14" errors="0" failures="0" skipped="0" time="0.735605">
        <testcase name="can create booking with calculated fields" file="tests\Feature\BookingCreationTest.php::can create booking with calculated fields" class="Tests\Feature\BookingCreationTest" classname="Tests.Feature.BookingCreationTest" assertions="9" time="0.239246"/>
        <testcase name="booking relationships work correctly" file="tests\Feature\BookingCreationTest.php::booking relationships work correctly" class="Tests\Feature\BookingCreationTest" classname="Tests.Feature.BookingCreationTest" assertions="4" time="0.218652"/>
        <testcase name="booking model has working days attribute" file="tests\Feature\BookingCreationTest.php::booking model has working days attribute" class="Tests\Feature\BookingCreationTest" classname="Tests.Feature.BookingCreationTest" assertions="1" time="0.277707"/>
      </testsuite>
      <testsuite name="Tests\Feature\Auth\AuthenticationTest" file="tests\Feature\Auth\AuthenticationTest.php" tests="3" assertions="7" errors="0" failures="0" skipped="0" time="1.419774">
        <testcase name="users can authenticate using the login screen" file="tests\Feature\Auth\AuthenticationTest.php::users can authenticate using the login screen" class="Tests\Feature\Auth\AuthenticationTest" classname="Tests.Feature.Auth.AuthenticationTest" assertions="3" time="0.605276"/>
        <testcase name="users can not authenticate with invalid password" file="tests\Feature\Auth\AuthenticationTest.php::users can not authenticate with invalid password" class="Tests\Feature\Auth\AuthenticationTest" classname="Tests.Feature.Auth.AuthenticationTest" assertions="1" time="0.475995"/>
        <testcase name="users can logout" file="tests\Feature\Auth\AuthenticationTest.php::users can logout" class="Tests\Feature\Auth\AuthenticationTest" classname="Tests.Feature.Auth.AuthenticationTest" assertions="3" time="0.338503"/>
      </testsuite>
      <testsuite name="Tests\Feature\UserManagementTest" file="tests\Feature\UserManagementTest.php" tests="15" assertions="60" errors="0" failures="0" skipped="0" time="6.798201">
        <testcase name="`User Management` → `User Creation` → it validates unique email addresses" file="tests\Feature\UserManagementTest.php::`User Management` → `User Creation` → it validates unique email addresses" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="5" time="0.698968"/>
        <testcase name="`User Management` → `User Model Functionality` → it handles soft deletion correctly" file="tests\Feature\UserManagementTest.php::`User Management` → `User Model Functionality` → it handles soft deletion correctly" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="2" time="0.273309"/>
        <testcase name="`User Management` → `User Editing` → it allows admin to update user information" file="tests\Feature\UserManagementTest.php::`User Management` → `User Editing` → it allows admin to update user information" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="5" time="0.579506"/>
        <testcase name="`User Management` → `User Listing` → it displays users with different roles" file="tests\Feature\UserManagementTest.php::`User Management` → `User Listing` → it displays users with different roles" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="4" time="0.564679"/>
        <testcase name="`User Management` → `User Editing` → it allows admin to change user roles" file="tests\Feature\UserManagementTest.php::`User Management` → `User Editing` → it allows admin to change user roles" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="4" time="0.618112"/>
        <testcase name="`User Management` → `User Creation` → it handles user creation correctly via Filament" file="tests\Feature\UserManagementTest.php::`User Management` → `User Creation` → it handles user creation correctly via Filament" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="7" time="0.600341"/>
        <testcase name="`User Management` → `User Creation` → it creates users with default password when none provided" file="tests\Feature\UserManagementTest.php::`User Management` → `User Creation` → it creates users with default password when none provided" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="6" time="0.508134"/>
        <testcase name="`User Management` → `User Listing` → it can search users by name or email" file="tests\Feature\UserManagementTest.php::`User Management` → `User Listing` → it can search users by name or email" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="2" time="0.596580"/>
        <testcase name="`User Management` → `User Model Functionality` → it can validate password correctly" file="tests\Feature\UserManagementTest.php::`User Management` → `User Model Functionality` → it can validate password correctly" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="2" time="0.207128"/>
        <testcase name="`User Management` → `User Creation` → it allows admin to create new users via Filament" file="tests\Feature\UserManagementTest.php::`User Management` → `User Creation` → it allows admin to create new users via Filament" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="6" time="0.649469"/>
        <testcase name="`User Management` → `User Model Functionality` → it validates email uniqueness" file="tests\Feature\UserManagementTest.php::`User Management` → `User Model Functionality` → it validates email uniqueness" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="1" time="0.208153"/>
        <testcase name="`User Management` → `User Listing` → it allows admin to view all users in Filament" file="tests\Feature\UserManagementTest.php::`User Management` → `User Listing` → it allows admin to view all users in Filament" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="6" time="0.417873"/>
        <testcase name="`User Management` → `User Editing` → it allows admin to edit any user via Filament" file="tests\Feature\UserManagementTest.php::`User Management` → `User Editing` → it allows admin to edit any user via Filament" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="4" time="0.448226"/>
        <testcase name="`User Management` → `User Model Functionality` → it tracks user relationships correctly" file="tests\Feature\UserManagementTest.php::`User Management` → `User Model Functionality` → it tracks user relationships correctly" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="4" time="0.226481"/>
        <testcase name="`User Management` → `User Model Functionality` → it handles user role changes" file="tests\Feature\UserManagementTest.php::`User Management` → `User Model Functionality` → it handles user role changes" class="Tests\Feature\UserManagementTest" classname="Tests.Feature.UserManagementTest" assertions="2" time="0.201244"/>
      </testsuite>
      <testsuite name="Tests\Feature\AuthorizationPolicyTest" file="tests\Feature\AuthorizationPolicyTest.php" tests="9" assertions="29" errors="0" failures="0" skipped="0" time="2.704986">
        <testcase name="`User Authorization Policy` → it allows admins to delete users except themselves" file="tests\Feature\AuthorizationPolicyTest.php::`User Authorization Policy` → it allows admins to delete users except themselves" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="3" time="0.225358"/>
        <testcase name="`User Authorization Policy` → it allows admins to view any users" file="tests\Feature\AuthorizationPolicyTest.php::`User Authorization Policy` → it allows admins to view any users" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="3" time="0.278305"/>
        <testcase name="`Vehicle Authorization Policy` → it allows admins and vehicle owners to update vehicles" file="tests\Feature\AuthorizationPolicyTest.php::`Vehicle Authorization Policy` → it allows admins and vehicle owners to update vehicles" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="4" time="0.366339"/>
        <testcase name="`Vehicle Authorization Policy` → it allows admins and owners to create vehicles" file="tests\Feature\AuthorizationPolicyTest.php::`Vehicle Authorization Policy` → it allows admins and owners to create vehicles" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="3" time="0.294875"/>
        <testcase name="`Vehicle Authorization Policy` → it allows everyone to view published vehicles" file="tests\Feature\AuthorizationPolicyTest.php::`Vehicle Authorization Policy` → it allows everyone to view published vehicles" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="3" time="0.299739"/>
        <testcase name="`Vehicle Authorization Policy` → it only allows admin to permanently delete vehicles" file="tests\Feature\AuthorizationPolicyTest.php::`Vehicle Authorization Policy` → it only allows admin to permanently delete vehicles" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="3" time="0.377929"/>
        <testcase name="`User Authorization Policy` → it allows admins to create users" file="tests\Feature\AuthorizationPolicyTest.php::`User Authorization Policy` → it allows admins to create users" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="3" time="0.277779"/>
        <testcase name="`Vehicle Authorization Policy` → it allows admins and vehicle owners to delete vehicles" file="tests\Feature\AuthorizationPolicyTest.php::`Vehicle Authorization Policy` → it allows admins and vehicle owners to delete vehicles" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="4" time="0.306184"/>
        <testcase name="`User Authorization Policy` → it allows users to view their own profile" file="tests\Feature\AuthorizationPolicyTest.php::`User Authorization Policy` → it allows users to view their own profile" class="Tests\Feature\AuthorizationPolicyTest" classname="Tests.Feature.AuthorizationPolicyTest" assertions="3" time="0.278477"/>
      </testsuite>
      <testsuite name="Tests\Feature\AdminPermissionsTest" file="tests\Feature\AdminPermissionsTest.php" tests="6" assertions="20" errors="0" failures="0" skipped="0" time="2.726987">
        <testcase name="it allows admin to view vehicles list in Filament" file="tests\Feature\AdminPermissionsTest.php::it allows admin to view vehicles list in Filament" class="Tests\Feature\AdminPermissionsTest" classname="Tests.Feature.AdminPermissionsTest" assertions="4" time="0.705637"/>
        <testcase name="it allows admin to access vehicle actions" file="tests\Feature\AdminPermissionsTest.php::it allows admin to access vehicle actions" class="Tests\Feature\AdminPermissionsTest" classname="Tests.Feature.AdminPermissionsTest" assertions="1" time="0.250265"/>
        <testcase name="it allows admin to edit user in Filament" file="tests\Feature\AdminPermissionsTest.php::it allows admin to edit user in Filament" class="Tests\Feature\AdminPermissionsTest" classname="Tests.Feature.AdminPermissionsTest" assertions="4" time="0.466587"/>
        <testcase name="it allows admin to edit vehicle in Filament" file="tests\Feature\AdminPermissionsTest.php::it allows admin to edit vehicle in Filament" class="Tests\Feature\AdminPermissionsTest" classname="Tests.Feature.AdminPermissionsTest" assertions="4" time="0.535611"/>
        <testcase name="it allows admin to access users resource methods" file="tests\Feature\AdminPermissionsTest.php::it allows admin to access users resource methods" class="Tests\Feature\AdminPermissionsTest" classname="Tests.Feature.AdminPermissionsTest" assertions="3" time="0.223985"/>
        <testcase name="it allows admin to view users list in Filament" file="tests\Feature\AdminPermissionsTest.php::it allows admin to view users list in Filament" class="Tests\Feature\AdminPermissionsTest" classname="Tests.Feature.AdminPermissionsTest" assertions="4" time="0.544902"/>
      </testsuite>
      <testsuite name="Tests\Feature\ActivityLogManagementTest" file="tests\Feature\ActivityLogManagementTest.php" tests="16" assertions="57" errors="0" failures="0" skipped="0" time="5.676740">
        <testcase name="`Activity Log Management` → `Real-time Activity Monitoring` → it displays live activity feed via Filament" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Real-time Activity Monitoring` → it displays live activity feed via Filament" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="7" time="0.598208"/>
        <testcase name="`Activity Log Management` → `Activity Log Analysis` → it displays activity summary by action type" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Activity Log Analysis` → it displays activity summary by action type" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="10" time="0.558992"/>
        <testcase name="`Activity Log Management` → `Security Monitoring` → it tracks failed login attempts" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Security Monitoring` → it tracks failed login attempts" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="3" time="0.222895"/>
        <testcase name="`Activity Log Management` → `Real-time Activity Monitoring` → it filters real-time activity by action" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Real-time Activity Monitoring` → it filters real-time activity by action" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="1" time="0.255038"/>
        <testcase name="`Activity Log Management` → `System Performance Logs` → it identifies slow API endpoints" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `System Performance Logs` → it identifies slow API endpoints" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="3" time="0.332991"/>
        <testcase name="`Activity Log Management` → `Log Cleanup` → it prevents cleanup of recent logs" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Log Cleanup` → it prevents cleanup of recent logs" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="2" time="0.265267"/>
        <testcase name="`Activity Log Management` → `Security Monitoring` → it monitors admin actions" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Security Monitoring` → it monitors admin actions" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="1" time="0.243779"/>
        <testcase name="`Activity Log Management` → `Activity Log Listing` → it filters logs by user" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Activity Log Listing` → it filters logs by user" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="2" time="0.310272"/>
        <testcase name="`Activity Log Management` → `Activity Log Creation` → it logs user login activities" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Activity Log Creation` → it logs user login activities" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="3" time="0.338125"/>
        <testcase name="`Activity Log Management` → `System Performance Logs` → it tracks API response times" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `System Performance Logs` → it tracks API response times" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="2" time="0.234547"/>
        <testcase name="`Activity Log Management` → `Security Monitoring` → it identifies security alerts via data analysis" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Security Monitoring` → it identifies security alerts via data analysis" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="1" time="0.244779"/>
        <testcase name="`Activity Log Management` → `Activity Log Creation` → it stores activity logs with proper structure" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Activity Log Creation` → it stores activity logs with proper structure" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="3" time="0.272298"/>
        <testcase name="`Activity Log Management` → `Activity Log Listing` → it can view activity logs in Filament table" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Activity Log Listing` → it can view activity logs in Filament table" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="6" time="0.557994"/>
        <testcase name="`Activity Log Management` → `Activity Log Analysis` → it tracks login patterns" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Activity Log Analysis` → it tracks login patterns" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="1" time="0.264862"/>
        <testcase name="`Activity Log Management` → `Log Cleanup` → it allows admin to cleanup old logs" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Log Cleanup` → it allows admin to cleanup old logs" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="3" time="0.392551"/>
        <testcase name="`Activity Log Management` → `Activity Log Analysis` → it shows user-specific activity logs" file="tests\Feature\ActivityLogManagementTest.php::`Activity Log Management` → `Activity Log Analysis` → it shows user-specific activity logs" class="Tests\Feature\ActivityLogManagementTest" classname="Tests.Feature.ActivityLogManagementTest" assertions="9" time="0.584140"/>
      </testsuite>
      <testsuite name="Tests\Feature\PaymentManagementTest" file="tests\Feature\PaymentManagementTest.php" tests="12" assertions="14" errors="0" failures="0" skipped="6" time="3.043124">
        <testcase name="`Payment Management` → `Error Handling` → it handles invalid booking id in payment intent" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Error Handling` → it handles invalid booking id in payment intent" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="0" time="0.269833">
          <skipped/>
        </testcase>
        <testcase name="`Payment Management` → `Payment Processing` → it requires booking_id for payment intent" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Payment Processing` → it requires booking_id for payment intent" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="0" time="0.275133">
          <skipped/>
        </testcase>
        <testcase name="`Payment Management` → `Error Handling` → it requires authentication for payment endpoints" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Error Handling` → it requires authentication for payment endpoints" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="1" time="0.233558">
          <skipped/>
        </testcase>
        <testcase name="`Payment Management` → `Rate Limiting` → it verifies rate limiting configuration exists" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Rate Limiting` → it verifies rate limiting configuration exists" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="1" time="0.206233">
          <skipped/>
        </testcase>
        <testcase name="`Payment Management` → `Payment API Endpoints` → it creates payment intent for stripe payments" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Payment API Endpoints` → it creates payment intent for stripe payments" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="0" time="0.248716">
          <skipped/>
        </testcase>
        <testcase name="`Payment Management` → `Payment Processing` → it validates payment intent for own booking only" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Payment Processing` → it validates payment intent for own booking only" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="1" time="0.310033"/>
        <testcase name="`Payment Management` → `Payment API Endpoints` → it allows checking payment status for own booking" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Payment API Endpoints` → it allows checking payment status for own booking" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="5" time="0.226927"/>
        <testcase name="`Payment Management` → `Error Handling` → it handles invalid booking id in payment status check" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Error Handling` → it handles invalid booking id in payment status check" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="2" time="0.215131"/>
        <testcase name="`Payment Management` → `Webhook Processing` → it requires stripe signature header" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Webhook Processing` → it requires stripe signature header" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="1" time="0.281986"/>
        <testcase name="`Payment Management` → `Webhook Processing` → it rejects webhooks without proper signature" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Webhook Processing` → it rejects webhooks without proper signature" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="2" time="0.278578"/>
        <testcase name="`Payment Management` → `Payment API Endpoints` → it prevents checking payment status for other users bookings" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Payment API Endpoints` → it prevents checking payment status for other users bookings" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="1" time="0.260721"/>
        <testcase name="`Payment Management` → `Payment Processing` → it creates payment intent for stripe payments" file="tests\Feature\PaymentManagementTest.php::`Payment Management` → `Payment Processing` → it creates payment intent for stripe payments" class="Tests\Feature\PaymentManagementTest" classname="Tests.Feature.PaymentManagementTest" assertions="0" time="0.236277">
          <skipped/>
        </testcase>
      </testsuite>
      <testsuite name="Tests\Feature\BookingManagementTest" file="tests\Feature\BookingManagementTest.php" tests="13" assertions="31" errors="0" failures="0" skipped="0" time="4.447247">
        <testcase name="`Booking Management` → `Booking Soft Deletion` → it soft deletes bookings instead of hard deletion" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Soft Deletion` → it soft deletes bookings instead of hard deletion" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="2" time="0.249652"/>
        <testcase name="`Booking Management` → `Booking Model Functionality` → it validates date logic correctly" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Model Functionality` → it validates date logic correctly" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="1" time="0.236206"/>
        <testcase name="`Booking Management` → `Booking Status Management` → it supports different booking statuses" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Status Management` → it supports different booking statuses" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="4" time="0.291170"/>
        <testcase name="`Booking Management` → `Booking Model Functionality` → it can create booking with valid data" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Model Functionality` → it can create booking with valid data" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="4" time="0.266002"/>
        <testcase name="`Booking Management` → `Booking Status Management` → it can update booking status via model" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Status Management` → it can update booking status via model" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="1" time="0.306020"/>
        <testcase name="`Booking Management` → `Booking Payment Status` → it tracks payment status separately from booking status" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Payment Status` → it tracks payment status separately from booking status" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="2" time="0.284192"/>
        <testcase name="`Booking Management` → `Booking Listing` → it allows admin to view all bookings via Filament" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Listing` → it allows admin to view all bookings via Filament" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="4" time="0.532146"/>
        <testcase name="`Booking Management` → `Booking Model Functionality` → it tracks booking conflicts correctly" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Model Functionality` → it tracks booking conflicts correctly" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="1" time="0.205188"/>
        <testcase name="`Booking Management` → `Booking Status Management` → it can cancel bookings via model" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Status Management` → it can cancel bookings via model" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="1" time="0.428096"/>
        <testcase name="`Booking Management` → `Booking Commission Calculation` → it calculates commission amount correctly" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Commission Calculation` → it calculates commission amount correctly" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="2" time="0.379135"/>
        <testcase name="`Booking Management` → `Booking Listing` → it filters bookings by status" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Listing` → it filters bookings by status" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="3" time="0.719700"/>
        <testcase name="`Booking Management` → `Booking Payment Status` → it supports different payment statuses" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Payment Status` → it supports different payment statuses" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="4" time="0.323099"/>
        <testcase name="`Booking Management` → `Booking Calendar Event Functionality` → it implements calendar event interface correctly" file="tests\Feature\BookingManagementTest.php::`Booking Management` → `Booking Calendar Event Functionality` → it implements calendar event interface correctly" class="Tests\Feature\BookingManagementTest" classname="Tests.Feature.BookingManagementTest" assertions="2" time="0.226642"/>
      </testsuite>
    </testsuite>
  </testsuite>
</testsuites>
